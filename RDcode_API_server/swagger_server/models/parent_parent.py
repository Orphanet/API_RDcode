# coding: utf-8

from __future__ import absolute_import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ParentParent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, parent_orph_acode: int=None, parent_preferred_term: str=None):  # noqa: E501
        """ParentParent - a model defined in Swagger

        :param parent_orph_acode: The parent_orph_acode of this ParentParent.  # noqa: E501
        :type parent_orph_acode: int
        :param parent_preferred_term: The parent_preferred_term of this ParentParent.  # noqa: E501
        :type parent_preferred_term: str
        """
        self.swagger_types = {
            'parent_orph_acode': int,
            'parent_preferred_term': str
        }

        self.attribute_map = {
            'parent_orph_acode': 'Parent ORPHAcode',
            'parent_preferred_term': 'Parent preferred term'
        }
        self._parent_orph_acode = parent_orph_acode
        self._parent_preferred_term = parent_preferred_term

    @classmethod
    def from_dict(cls, dikt) -> 'ParentParent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parent_Parent of this ParentParent.  # noqa: E501
        :rtype: ParentParent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parent_orph_acode(self) -> int:
        """Gets the parent_orph_acode of this ParentParent.


        :return: The parent_orph_acode of this ParentParent.
        :rtype: int
        """
        return self._parent_orph_acode

    @parent_orph_acode.setter
    def parent_orph_acode(self, parent_orph_acode: int):
        """Sets the parent_orph_acode of this ParentParent.


        :param parent_orph_acode: The parent_orph_acode of this ParentParent.
        :type parent_orph_acode: int
        """

        self._parent_orph_acode = parent_orph_acode

    @property
    def parent_preferred_term(self) -> str:
        """Gets the parent_preferred_term of this ParentParent.


        :return: The parent_preferred_term of this ParentParent.
        :rtype: str
        """
        return self._parent_preferred_term

    @parent_preferred_term.setter
    def parent_preferred_term(self, parent_preferred_term: str):
        """Sets the parent_preferred_term of this ParentParent.


        :param parent_preferred_term: The parent_preferred_term of this ParentParent.
        :type parent_preferred_term: str
        """

        self._parent_preferred_term = parent_preferred_term
