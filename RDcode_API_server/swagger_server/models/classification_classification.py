# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ClassificationClassification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_of_the_classification: int=None, name_of_the_classification: str=None, orph_acode: int=None, preferred_term: str=None):  # noqa: E501
        """ClassificationClassification - a model defined in Swagger

        :param id_of_the_classification: The id_of_the_classification of this ClassificationClassification.  # noqa: E501
        :type id_of_the_classification: int
        :param name_of_the_classification: The name_of_the_classification of this ClassificationClassification.  # noqa: E501
        :type name_of_the_classification: str
        :param orph_acode: The orph_acode of this ClassificationClassification.  # noqa: E501
        :type orph_acode: int
        :param preferred_term: The preferred_term of this ClassificationClassification.  # noqa: E501
        :type preferred_term: str
        """
        self.swagger_types = {
            'id_of_the_classification': int,
            'name_of_the_classification': str,
            'orph_acode': int,
            'preferred_term': str
        }

        self.attribute_map = {
            'id_of_the_classification': 'ID of the classification',
            'name_of_the_classification': 'Name of the classification',
            'orph_acode': 'ORPHAcode',
            'preferred_term': 'Preferred term'
        }
        self._id_of_the_classification = id_of_the_classification
        self._name_of_the_classification = name_of_the_classification
        self._orph_acode = orph_acode
        self._preferred_term = preferred_term

    @classmethod
    def from_dict(cls, dikt) -> 'ClassificationClassification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Classification_Classification of this ClassificationClassification.  # noqa: E501
        :rtype: ClassificationClassification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_of_the_classification(self) -> int:
        """Gets the id_of_the_classification of this ClassificationClassification.


        :return: The id_of_the_classification of this ClassificationClassification.
        :rtype: int
        """
        return self._id_of_the_classification

    @id_of_the_classification.setter
    def id_of_the_classification(self, id_of_the_classification: int):
        """Sets the id_of_the_classification of this ClassificationClassification.


        :param id_of_the_classification: The id_of_the_classification of this ClassificationClassification.
        :type id_of_the_classification: int
        """

        self._id_of_the_classification = id_of_the_classification

    @property
    def name_of_the_classification(self) -> str:
        """Gets the name_of_the_classification of this ClassificationClassification.


        :return: The name_of_the_classification of this ClassificationClassification.
        :rtype: str
        """
        return self._name_of_the_classification

    @name_of_the_classification.setter
    def name_of_the_classification(self, name_of_the_classification: str):
        """Sets the name_of_the_classification of this ClassificationClassification.


        :param name_of_the_classification: The name_of_the_classification of this ClassificationClassification.
        :type name_of_the_classification: str
        """

        self._name_of_the_classification = name_of_the_classification

    @property
    def orph_acode(self) -> int:
        """Gets the orph_acode of this ClassificationClassification.


        :return: The orph_acode of this ClassificationClassification.
        :rtype: int
        """
        return self._orph_acode

    @orph_acode.setter
    def orph_acode(self, orph_acode: int):
        """Sets the orph_acode of this ClassificationClassification.


        :param orph_acode: The orph_acode of this ClassificationClassification.
        :type orph_acode: int
        """

        self._orph_acode = orph_acode

    @property
    def preferred_term(self) -> str:
        """Gets the preferred_term of this ClassificationClassification.


        :return: The preferred_term of this ClassificationClassification.
        :rtype: str
        """
        return self._preferred_term

    @preferred_term.setter
    def preferred_term(self, preferred_term: str):
        """Sets the preferred_term of this ClassificationClassification.


        :param preferred_term: The preferred_term of this ClassificationClassification.
        :type preferred_term: str
        """

        self._preferred_term = preferred_term
